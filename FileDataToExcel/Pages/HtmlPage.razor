@page "/htmldata"


@using FileDataToExcel.Models
@using System.Diagnostics
@inject IJSRuntime JSRuntime


<PageTitle>File html</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true" Align="Align.Center">HMI ANALYSIS</MudText>

@inject ISnackbar Snackbar

<MudPaper @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass" Height="125px" Outlined="true" Class="@DragClass">
    @if (!Clearing)
    {
        <InputFile OnChange="OnInputFileChanged" multiple class="absolute mud-width-full mud-height-full overflow-hidden z-2" style="opacity:0;" accept=".html, .htm" />
    }
    <MudText Typo="Typo.h6">Drag and drop files here or click MAX 10 FILES</MudText>
    @foreach (var file in loadedFiles)
    {
        <MudChip Color="Color.Dark" Text="@file.Name" />
    }
</MudPaper>
<br/>

<MudProgressLinear hidden="@(!loadedFiles.Any())" Color="Color.Tertiary" Size="Size.Medium" Indeterminate="true" Class="my-7"/>

@*<MudToolBar DisableGutters="true" Class="gap-4">
    <MudButton OnClick="Upload" Disabled="@(!loadedFiles.Any())" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Filled.CloudUpload" Class="mr-1">Upload</MudButton>
    <MudButton OnClick="Clear" Disabled="@(!loadedFiles.Any())" Color="Color.Error" Variant="Variant.Filled" StartIcon="@Icons.Filled.Clear">Clear</MudButton>
</MudToolBar>*@

@*<MudText Typo="Typo.h6">@filesCount</MudText>*@

<MudDataGrid T="HtmlItem" MultiSelection="true" Items="@HtmlItems" Sortable="true" Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true" Hover="true" Dense="true" Bordered="true" Striped="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">HMI ANALYSIS</MudText>
        <MudSpacer />
        <MudButton OnClick="ExportToExcel" Disabled="@(HtmlItems.Count() <= 0)" Color="Color.Tertiary" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ArrowDownward" Class="mr-1">Excel Export</MudButton>
        <MudButton OnClick="ClearTable" Disabled="@(HtmlItems.Count() <= 0)" Color="Color.Error" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Clear">Clear Table</MudButton>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        @*<SelectColumn T="HtmlItem" />*@
        @foreach (var prop in props)
        {
            <Column T="HtmlItem" Field="@prop" />
        }

    </Columns>
    <PagerContent>
        <MudDataGridPager T="HtmlItem" />
    </PagerContent>
</MudDataGrid>


@code {

    private bool Clearing = false;
    //private bool ClearTable = false;
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string DragClass = DefaultDragClass;
    private List<IBrowserFile> loadedFiles = new();
    private string? _searchString;
    private List<string?> props = new();
    private List<HtmlItem> HtmlItems = new();

    //private string? filesCount;

    protected override void OnInitialized()
    {
        foreach (var propertyInfo in typeof(HtmlItem).GetProperties())
        {
            props.Add(propertyInfo.Name);
        }
    }


    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();

        foreach (var file in files)
        {
            if (file.Name.Split(".")[1] == "htm" || file.Name.Split(".")[1] == "html")
                loadedFiles.Add(file);
        }

        Upload();
    }

    private async Task Clear()
    {
        Clearing = true;
        loadedFiles.Clear();
        ClearDragClass();
        await Task.Delay(100);
        Clearing = false;
    }

    private async void Upload()
    {
        //Upload the files here

        //HtmlItems.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        int fileExist = 0;

        foreach (var file in loadedFiles)
        {

            Stream stream = file.OpenReadStream();
            MemoryStream ms = new MemoryStream();
            await stream.CopyToAsync(ms);

            stream.Close();
            var outputFileString = System.Text.Encoding.UTF8.GetString(ms.ToArray());

            HtmlItem htmlItem = new();

            htmlItem.FileName = file.Name.Split(".")[0];

            String[] fileContents = outputFileString.Split("Text?Title:");

            fileContents = fileContents.Skip(1).ToArray();

            foreach (var fileContent in fileContents)
            {
                htmlItem.Title = fileContent.Split(";")[0];
            }

            if (!HtmlItems.Any(x => x.Title == htmlItem.Title && x.FileName == htmlItem.FileName))
                HtmlItems.Add(htmlItem);
            else
                fileExist++;
        }

        if(fileExist > 0)
            Snackbar.Add("" + fileExist + " File(s) already exist", Severity.Info);

        await Clear();        

        this.StateHasChanged();
    }

    private void ClearTable()
    {
        HtmlItems.Clear();
        this.StateHasChanged();
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }

    // quick filter - filter gobally across multiple columns with the same input
    private Func<HtmlItem, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        foreach (var prop in props)
        {
            if (x.GetType().GetProperty(prop).GetValue(x, null).ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;
        }

        return false;
    };

    public async Task ExportToExcel()
    {

        using (var workbook = new XLWorkbook())
        {

            IXLWorksheet worksheet = workbook.Worksheets.Add("HMI-ANALYSIS");
            var p = 1;
            foreach (var prop in props)
            {
                worksheet.Cell(1, p).Value = prop;
                p++;
            }


            for (int i = 1; i <= props.Count(); i++)
            {
                worksheet.Cell(1, i).Style.Font.Bold = true;
            }

            int index = 1;
            foreach (var htmlitem in HtmlItems)
            {
                int i = 1;
                foreach (var prop in props)
                {
                    worksheet.Cell(index + 1, i).Value = htmlitem.GetType().GetProperty(prop).GetValue(htmlitem, null);
                    i++;
                }
                index++;
            }

            using (var stream = new MemoryStream())
            {
                workbook.SaveAs(stream);
                var content = stream.ToArray();

                var fileName = "Output_HTML_Files_" + DateTime.Now.ToString("dd-MM-yyyy") + " .xlsx";
                await JSRuntime.InvokeAsync<object>("saveAsFile", fileName, Convert.ToBase64String(content));
            }
        }
    }
}