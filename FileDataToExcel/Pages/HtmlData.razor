@page "/htmldata"


@using ClosedXML.Excel
@using ClosedXML.Report
@using FileDataToExcel.Models
@using System.Diagnostics
@inject IJSRuntime JSRuntime


<PageTitle>File html</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true" Align="Align.Center">File HTML</MudText>

@inject ISnackbar Snackbar

<MudPaper @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass" Height="100px" Outlined="true" Class="@DragClass">
    @if (!Clearing)
    {
        <InputFile OnChange="OnInputFileChanged" multiple class="absolute mud-width-full mud-height-full overflow-hidden z-2" style="opacity:0;" />
    }
    <MudText Typo="Typo.h6">Drag and drop files here or click</MudText>
    @foreach (var file in loadedFiles)
    {
        <MudChip Color="Color.Dark" Text="@file.Name" />
    }
</MudPaper>

<MudToolBar DisableGutters="true" Class="gap-4">
    <MudButton OnClick="Upload" Disabled="@(!loadedFiles.Any())" Color="Color.Primary" Variant="Variant.Filled">Upload</MudButton>
    <MudButton OnClick="Clear" Disabled="@(!loadedFiles.Any())" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
</MudToolBar>

<MudTable Items="@htmldatas" Hover="true" Dense="true" Bordered="true" Striped="true" Filter="new Func<Htmldata,bool>(FilterFunc1)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">SYSTEM ENTITY</MudText>
        <MudSpacer />
        <MudButton OnClick="ExportToExcel" Disabled="@(!loadedFiles.Any())" Color="Color.Primary" Variant="Variant.Filled">ExportExcel</MudButton>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        @foreach (var prop in props)
        {
            <MudTh>@prop</MudTh>
        }
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        @*@foreach (var htmldata in htmldatas)
        {
            @foreach (var prop in props)
            {
                @*<MudTd DataLabel="@prop">@context.GetType().GetProperty(prop).GetValue(datatxt, null)</MudTd>
                <MudTd DataLabel="@prop">@context.GetType().GetProperty(@prop).GetValue(@htmldata, null)</MudTd>
            }
        }*@
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>


@code {

    private bool Clearing = false;
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string DragClass = DefaultDragClass;
    private List<IBrowserFile> loadedFiles = new();
    private string searchString1 = String.Empty;
    private List<string?> props = new();
    private List<Htmldata> htmldatas = new();


    protected override void OnInitialized()
    {
        foreach (var propertyInfo in typeof(Htmldata).GetProperties())
        {
            props.Add(propertyInfo.Name);
        }
    }


    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            loadedFiles.Add(file);
        }

        Upload();
    }

    private async Task Clear()
    {
        Clearing = true;
        loadedFiles.Clear();
        ClearDragClass();
        await Task.Delay(100);
        Clearing = false;
    }
    private async void Upload()
    {
        //Upload the files here

        foreach (var file in loadedFiles)
        {
            Stream stream = file.OpenReadStream();
            MemoryStream ms = new MemoryStream();
            await stream.CopyToAsync(ms);

            stream.Close();
            var outputFileString = System.Text.Encoding.UTF8.GetString(ms.ToArray());

            Htmldata htmldata = new();

            htmldata.Title = file.Name.Split(".")[0];

            htmldatas.Add(htmldata);

            //String[] fileContents = outputFileString.Split("{");

            //fileContents = fileContents.Skip(1).ToArray();

            //foreach (var fileContent in fileContents)
            //{
            //    String[] strContents = fileContent.Split("}");

            //    strContents = strContents.Skip(1).ToArray();

            //    foreach (var strContent in strContents)
            //    {
            //        Htmldata htmldata = new();

            //        //foreach (var prop in props)//foreach (var dEnum in Enum.GetValues(typeof(Datatxtenum)))
            //        //{
            //        //    //results.Add(dEnum.ToString());
            //        //    if (prop == "ID")
            //        //    {
            //        //        var pattern = @"&N(.*)";
            //        //        var dataPattern = Regex.Match(strContent, pattern, RegexOptions.IgnoreCase).Groups[1].Value;
            //        //        htmldata.ID = dataPattern;
            //        //    }
            //        //    else
            //        //    {
            //        //        var pattern = @"" + prop.ToString() + "(.*)";
            //        //        var dataPattern = Regex.Match(strContent, pattern, RegexOptions.IgnoreCase).Groups[1].Value.Split("=")[1];

            //        //        htmldata.GetType().GetProperty(prop).SetValue(htmldata, dataPattern);
            //        //    }
            //        //}

            //        htmldatas.Add(htmldata);
            //    }
            //}
        }


        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("TODO: Upload your files!", Severity.Normal);
        //Snackbar.Add(outputFileString, Severity.Normal);

        this.StateHasChanged();
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }

    //private string stringBetween(string Source, string Start, string End)
    //{
    //    string result = "";
    //    if (Source.Contains(Start) && Source.Contains(End))
    //    {
    //        int StartIndex = Source.IndexOf(Start, 0) + Start.Length;
    //        int EndIndex = Source.IndexOf(End, StartIndex);
    //        result = Source.Substring(StartIndex, EndIndex - StartIndex);
    //        return result;
    //    }

    //    return result;
    //}

    private bool FilterFunc1(Htmldata element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Htmldata element, string searchString)
    {
        foreach (var htmldata in htmldatas)
        {
            int i = 1;
            foreach (var prop in props)
            {
                if (element.GetType().GetProperty(prop).Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                    return true;
                i++;
            }
        }

        return false;
    }

    public async Task ExportToExcel()
    {

        using (var workbook = new XLWorkbook())
        {

            IXLWorksheet worksheet = workbook.Worksheets.Add("System");
            var p = 1;
            foreach (var prop in props)
            {
                worksheet.Cell(1, p).Value = prop;
                p++;
            }


            for (int i = 1; i <= props.Count(); i++)
            {
                worksheet.Cell(1, i).Style.Font.Bold = true;
            }

            int index = 1;
            foreach (var htmldata in htmldatas)
            {
                int i = 1;
                foreach (var prop in props)
                {
                    worksheet.Cell(index + 1, i).Value = htmldata.GetType().GetProperty(prop).GetValue(htmldata, null);
                    i++;
                }
                index++;
            }

            using (var stream = new MemoryStream())
            {
                workbook.SaveAs(stream);
                var content = stream.ToArray();

                var fileName = "Output_HTML_Files_" + DateTime.Now.ToString("dd-MM-yyyy") + " .xlsx";
                await JSRuntime.InvokeAsync<object>("saveAsFile", fileName, Convert.ToBase64String(content));
            }
        }
    }
}